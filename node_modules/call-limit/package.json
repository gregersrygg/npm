{
  "name": "call-limit",
  "version": "1.0.3",
  "description": "Limit the number of simultaneous calls to an async function",
  "main": "index.js",
  "scripts": {
    "prepublish": "babel call-limit.js --out-dir es5",
    "test": "tap test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/iarna/call-limit.git"
  },
  "author": {
    "name": "Rebecca Turner",
    "email": "me@re-becca.org"
  },
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/iarna/call-limit/issues"
  },
  "homepage": "https://npmjs.com/packages/call-limit",
  "dependencies": {},
  "devDependencies": {
    "babel": "^5.0.2",
    "tap": "^1.0.0"
  },
  "engine": {
    "node": ">=0.10.x"
  },
  "readme": "call-limit\n----------\n\nLimit the number of simultaneous executions of a async function.\n\n```javascript\nvar fs = require('fs')\nvar limit = require('call-limit')\nvar limitedStat = limit(fs.stat, 5)\n```\n\n\n### USAGE:\n\nGiven that:\n\n```javascript\nvar limit = require('call-limit')\n```\n\n### limit(func, maxRunning) â†’ limitedFunc\n\nThe returned function will execute up to maxRunning calls of `func` at once. \nBeyond that they get queued and called when the previous call completes.\n\n`func` must accept a callback as the final argument and must call it when\nit completes, or `call-limit` won't know to dequeue the next thing to run.\n\nBy contrast, callers to `limitedFunc` do NOT have to pass in a callback, but\nif they do they'll be called when `func` calls its callback.\n\n### limit.method(class, methodName, maxRunning)\n\nThis is sugar for:\n\n```javascript\nclass.prototype.methodName = limit(class.prototype.methodName, maxRunning)\n```\n\n### limit.method(object, methodName, maxRunning)\n\nThis is sugar for:\n\n```javascript\nobject.methodName = limit(object.methodName, maxRunning)\n```\n",
  "readmeFilename": "README.md",
  "gitHead": "15149704fdefd35bb66eb99188f32db0476078a9",
  "_id": "call-limit@1.0.3",
  "_shasum": "e0bd97382e4d13cc30a1863a1e0faa347226e1aa",
  "_from": "call-limit@>=1.0.1 <1.1.0"
}
